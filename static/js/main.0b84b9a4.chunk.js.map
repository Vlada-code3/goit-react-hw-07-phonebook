{"version":3,"sources":["components/contactsForm/ContactsFormStyled.js","components/contactsForm/ContactsForm.js","components/contactsList/StyledContactList.js","components/contactsList/ContactsList.js","components/section/SectionStyled.js","components/section/Section.js","components/filter/ContactFilterStyled.js","components/filter/ContactsFilter.js","redux/contacts/contactsAction.js","redux/contacts/contactsSelectors.js","components/Contacts.js","redux/contacts/contactsOperation.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["ContactsLabel","styled","label","ContactsForm","state","name","number","onHandleSubmit","e","preventDefault","props","checkDublicateName","alert","addContact","setState","onHandleChange","target","value","onSubmit","this","type","onChange","pattern","title","required","Component","StyledContactList","div","ContactsList","contacts","onDeleteContact","className","map","contact","onClick","id","StyledSection","Section","children","style","StyledContactFilter","ContactsFilter","filter","setFilter","createAction","deleteContact","getAllContacts","filterContacts","setError","resetError","setContactsLoading","getContactSelector","filterContactSelector","errorContactSelector","error","getFilteringContacts","createSelector","toLowerCase","includes","Contacts","items","a","addContactOperation","deleteContactsOperation","some","getFilteredContacts","console","log","getAllContactsOperation","isLoading","mapDispatchToProps","dispatch","axios","get","data","Object","keys","key","response","post","delete","connect","App","contactsReducer","createReducer","payload","_","filterReducer","contactLoaderReducer","contactErrorReducer","rootReducer","combineReducers","isLoadind","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b84b9a4.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const ContactsLabel = styled.label`\n\n width:400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-top: 50px;\n margin-bottom: 50px;\n\n\n`","import React, { Component } from 'react';\nimport { ContactsLabel} from './ContactsFormStyled'\nimport { v4 as uuid } from 'uuid';\n\n\nimport PropTypes from 'prop-types';\nclass ContactsForm extends Component {\n    // static propTypes = {\n    //     handleAdd: PropTypes.func.isRequired\n    // };\n    state = {\n      \n        name: \"\",\n        number: \"\",\n        \n        \n    }\n    \n\n    onHandleSubmit = (e) => {\n        e.preventDefault()\n        if (this.props.checkDublicateName(this.state.name)) {\n            alert(`${this.state.name} already exist`)\n            return\n        } \n       \n        this.props.addContact(this.state )\n        \n        \n        this.setState({\n           \n            name: \"\",\n            number:\"\",\n\n\n        })\n   \n    };\n    onHandleChange = (e) => {\n        const { name, value } = e.target\n        this.setState({ [name]: value }); //___v [name] prihodit name i price\n    }\n\n\n    render() {\n        return (\n            \n            <form onSubmit={this.onHandleSubmit}>\n\n                <ContactsLabel >\n                    Name\n                      <input\n                        type=\"text\"\n                        onChange={this.onHandleChange}\n                        value={this.state.name}\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                    />\n                </ContactsLabel>\n                <ContactsLabel>\n                    Number\n                      <input\n                        type=\"tel\"\n                        onChange={this.onHandleChange}\n                        value={this.state.number}\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                    />\n                </ContactsLabel>\n                <button type=\"submit\" >Add Contact</button>\n            </form>\n            \n               \n        );\n    }\n}\n\nContactsForm.propTypes = {\n    onHandleSubmit: PropTypes.func,\n    name: PropTypes.string,\n    number: PropTypes.string,\n}.isRequired;\n\nexport default ContactsForm;","import styled from 'styled-components'\n\nexport const StyledContactList = styled.div`\n\n    width:400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-top: 50px;\n\n`","import React from 'react'\nimport PropTypes from 'prop-types';\nimport Contacts from '../Contacts';\nimport { StyledContactList } from './StyledContactList' ;\n\nconst ContactsList = ({contacts, onDeleteContact}) => {\n\n    return (\n        <StyledContactList>\n        <div className=\"card\">\n            \n            <ul className=\"contactItem\">\n                \n                {contacts.map(contact => (\n                    \n                    <li key= {contact.id } >\n                        <p>{contact.name}</p>\n                        <p>{contact.number}</p>\n                        <button type=\"button\" onClick={onDeleteContact} id={contact.id}>\n                            Delete</button>\n                    </li>\n                ))}\n            \n                \n            </ul>\n            </div>\n        </StyledContactList>\n    );\n}\n\nContactsList.propTypes = {\n    onDeleteContact: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n    })),\n}\nexport default ContactsList;\n","import styled from 'styled-components'\n\nexport const StyledSection = styled.div`\n\nborder: 1px solid black;\npadding:10px;\nh2{\n    color: red ;\n}\n\n`\n","import React from 'react'\nimport { StyledSection } from './SectionStyled';\n\nconst Section = ({title, children, style}) => {\n    return (\n        \n        <StyledSection >\n            <h2>{title}</h2>\n            {children}\n            \n        </StyledSection>\n    );\n}\n\nexport default Section;","import styled from 'styled-components'\n\nexport const StyledContactFilter = styled.div`\n width:400px;\n\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-top: 50px;\n    \n    input {\n    width: 60%;\n  padding: 12px 10px;\n margin-left: 10px;\n  display: inline-block;\n  border-radius: 4px;\n  box-sizing: border-box;\n  border: 1px solid #ccc8c8;\n  transition: .3s border-color;\n\n\n}\n    `","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { StyledContactFilter } from './ContactFilterStyled';\n\n\nconst ContactsFilter = ({ filter, setFilter }) => {\n    return (\n        <StyledContactFilter>\n        <label >Filter:\n            <input type=\"text\"\n                value={filter}\n                onChange={setFilter}\n            />\n            </label>\n        </StyledContactFilter>\n    );\n}\n\nContactsFilter.propTypes = {\n    filter: PropTypes.string,\n    setFilter: PropTypes.func,\n}.isRequired;\nexport default ContactsFilter;","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const addContact = createAction(\"contacts/addContact\");\nexport const deleteContact = createAction(\"contacts/deleteContact\");\nexport const getAllContacts = createAction(\"contacts/getAllContacts\");\nexport const filterContacts = createAction(\"contacts/filterContacts\");\n\nexport const setError = createAction(\"contacts/setError\");\nexport const resetError = createAction(\"contacts/resetError\");\nexport const setContactsLoading = createAction(\"contacts/setContactsLoading\");\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getContactSelector = state => state.contacts;\nconst filterContactSelector = state => state.filter;\nconst loaderContactSelector = state => state.isContactLoading;\nconst errorContactSelector = state => state.error;\n\nconst getFilteringContacts = createSelector(\n  [getContactSelector, filterContactSelector],\n  (contacts, filter) => {\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n  }\n);\nexport { getContactSelector, filterContactSelector, loaderContactSelector, errorContactSelector, getFilteringContacts };\n","import React, { Component } from \"react\";\nimport ContactsForm from \"./contactsForm/ContactsForm\";\nimport ContactsList from \"./contactsList/ContactsList\";\nimport Section from \"./section/Section\";\nimport { connect } from \"react-redux\";\nimport ContactsFilter from \"./filter/ContactsFilter\";\nimport { filterContacts } from \"../redux/contacts/contactsAction\";\nimport { addContactOperation, deleteContactsOperation, getAllContactsOperation } from \"../redux/contacts/contactsOperation\";\nimport {\n  errorContactSelector,\n  filterContactSelector,\n  getContactSelector,\n  getFilteringContacts\n} from \"../redux/contacts/contactsSelectors\";\n\nclass Contacts extends Component {\n  state = {\n    contacts: {\n      items: [],\n      filter: \"\"\n    }\n  };\n\n  async componentDidMount() {\n    this.props.getAllContactsOperation();\n\n    // try {\n    //   const { data } = await axios.get(`https://phonebook-d0d0b-default-rtdb.firebaseio.com/contacts.json`);\n    //   if (data) {\n    //     const contacts = Object.keys(data).map(key => ({ id: key, ...data[key] }));\n    //     this.props.getAllContacts(contacts);\n    //   }\n    //   console.log(data);\n    // } catch (error) {}\n  }\n\n  addContact = async contact => {\n    this.props.addContactOperation(contact);\n\n    // try {\n    //   const { data } = await axios.post(`https://phonebook-d0d0b-default-rtdb.firebaseio.com/contacts.json`, contact);\n    //   this.props.addContact({ ...contact, id: data.name });\n    //   console.log(data);\n    // } catch (error) {}\n  };\n\n  onDeleteContact = async e => {\n    const { id } = e.target;\n    this.props.deleteContactsOperation(id);\n    // try {\n    //   const { id } = e.target;\n    //   await axios.delete(`https://phonebook-d0d0b-default-rtdb.firebaseio.com/contacts/${id}.json`);\n    //   this.props.deleteContact(id);\n    // } catch (error) {}\n  };\n\n  checkDublicateName = name => {\n    return this.props.contacts.some(contact => contact.name === name);\n  };\n\n  setFilter = e => {\n    const { value } = e.target;\n    this.props.filterContacts(value);\n  };\n\n  getFilteredContacts = () => {\n    console.log(this.props);\n    return this.props.contacts.filter(contact => contact.name.toLowerCase().includes(this.props.filter.toLowerCase()));\n  };\n\n  render() {\n    return (\n      <>\n        {this.props.error && <h2>{this.props.error}</h2>}\n        {this.props.isLoading && <h2>Loading....</h2>}\n        <Section title=\"Phonebook\">\n          <ContactsForm addContact={this.addContact} checkDublicateName={this.checkDublicateName} />\n        </Section>\n\n        <Section title=\"Find contact by name\">\n          <ContactsFilter filter={this.props.filter} setFilter={this.setFilter} />\n        </Section>\n\n        <Section title=\"Contacts\">\n          <ContactsList contacts={this.props.contacts} onDeleteContact={this.onDeleteContact} />\n        </Section>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getContactSelector(state),\n    filter: filterContactSelector(state),\n    error: errorContactSelector(state),\n    filterContacts: getFilteringContacts(state)\n  };\n};\n\nconst mapDispatchToProps = {\n  getAllContactsOperation,\n  addContactOperation,\n  deleteContactsOperation,\n  filterContacts\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Contacts);\n","import axios from \"axios\";\nimport { setContactsLoading, setError } from \"./contactsAction\";\n\nimport { addContact, deleteContact, getAllContacts } from \"./contactsAction\";\n\nconst addContactOperation = contact => async dispatch => {\n  dispatch(setContactsLoading());\n  try {\n    const { data } = await axios.post(`https://phonebook-d0d0b-default-rtdb.firebaseio.com/contacts.json`, contact);\n    dispatch(addContact({ ...contact, id: data.name }));\n  } catch (error) {\n    dispatch(setError(error.response.data.error));\n  } finally {\n    dispatch(setContactsLoading());\n  }\n};\n\nconst deleteContactsOperation = id => async dispatch => {\n  dispatch(setContactsLoading());\n  try {\n    await axios.delete(`https://phonebook-d0d0b-default-rtdb.firebaseio.com/contacts/${id}.json`);\n    dispatch(deleteContact(id));\n  } catch (error) {\n    dispatch(setError(error.response.data.error));\n  } finally {\n    dispatch(setContactsLoading());\n  }\n};\n\nconst getAllContactsOperation = () => async dispatch => {\n  dispatch(setContactsLoading());\n  try {\n    const { data } = await axios.get(`https://phonebook-d0d0b-default-rtdb.firebaseio.com/contacts.json`);\n    if (data) {\n      const contacts = Object.keys(data).map(key => ({ id: key, ...data[key] }));\n      dispatch(getAllContacts(contacts));\n    }\n  } catch (error) {\n    dispatch(setError(error.response.data.error));\n  } finally {\n    dispatch(setContactsLoading());\n  }\n};\n\nexport { addContactOperation, deleteContactsOperation, getAllContactsOperation };\n","import React from 'react'\nimport Contacts from './Contacts'\n\nconst App = () => {\n    return (\n        <>\n            <Contacts/>\n            </>\n    );\n}\n\nexport default App;","import { combineReducers, createReducer } from \"@reduxjs/toolkit\";\n\nimport {\n  addContact,\n  deleteContact,\n  getAllContacts,\n  filterContacts,\n  setContactsLoading,\n  setError,\n  resetError\n} from \"./contactsAction\";\n\nexport const contactsReducer = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) => [...state.filter(contact => contact.id !== payload)],\n  [getAllContacts]: (_, { payload }) => payload\n});\n\nexport const filterReducer = createReducer(\"\", {\n  [filterContacts]: (_, { payload }) => payload\n});\n\nconst contactLoaderReducer = createReducer(false, {\n  [setContactsLoading]: state => !state\n});\n\nconst contactErrorReducer = createReducer(\"\", {\n  [setError]: (_, { payload }) => payload,\n  [resetError]: () => \"\"\n});\n\nconst contactReducer = combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n  isLoadind: contactLoaderReducer,\n  error: contactErrorReducer\n});\n\nexport default contactReducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport { contactsReducer, filterReducer } from \"./contacts/contactsReducer\";\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer\n});\n\nconst store = configureStore({\n  reducer: rootReducer\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./components/App\";\nimport \"./index.css\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}